{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "./src/button"
          }
        },
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "./src/card"
          }
        },
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "Column",
          "declaration": {
            "name": "Column",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "ColumnData",
          "declaration": {
            "name": "ColumnData",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "./src/table"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "manifest.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "prepublish.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "dist/bundles/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "target"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "target",
            "module": "dist/bundles/index.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "target",
            "module": "dist/bundles/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/fesm2015/index.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ButtonComponent",
          "default": "class ButtonComponent extends HTMLButtonElement {\n    constructor() {\n        super();\n    }\n    connectedCallback() {\n        this.classList.add('in-button');\n        attachStyle(this);\n    }\n}",
          "description": "Customized built-in element that renders a styled button.\n\n`ButtonComponent` is displayed contextually as one of three variants: primary, secondary or icon. The variant is set using a CSS classname. The label is set via the content of the `HTMLButtonElement`. When displayed as the icon variant, ButtonComponent expects two direct children: `HTMLSVGElement` and `HTMLSpanElement` that displays a label exclusively for screen readers using the `hidden` HTML attribute."
        },
        {
          "kind": "variable",
          "name": "CardComponent",
          "default": "class CardComponent extends HTMLElement {\n    constructor() {\n        super();\n        attachShadow(this);\n    }\n}",
          "description": "Autonomous custom element that renders a card container.\n`CardComponent` displays content in a header, content, footer layout."
        },
        {
          "kind": "variable",
          "name": "DialogComponent",
          "default": "class DialogComponent extends HTMLElement {\n    constructor() {\n        super();\n        attachShadow(this, {\n            mode: 'open',\n        });\n    }\n    static get observedAttributes() {\n        return ['target', 'template', 'variant'];\n    }\n    attributeChangedCallback(name, prev, next) {\n        switch (name) {\n            case 'target':\n                // if this DialogComponent instance does not exist in the DialogStack, add it in\n                if (window.__dialogStack.findTemplateIndex(next) === -1) {\n                    window.__dialogStack.registerTemplate(next);\n                    setTimeout(() => this.setTarget(next), 1);\n                }\n                break;\n            case 'template':\n                this.$templateSelector = next;\n                break;\n            case 'variant':\n                this.$variant = next;\n                break;\n        }\n    }\n    onOpen(ev) {\n        const template = document.querySelector(this.$templateSelector);\n        if (!template) {\n            console.error(`DialogComponent cannot find HTMLTemplateElement with selector ${this.$templateSelector}`);\n            return;\n        }\n        this.$container = document.createElement(`in-${this.$variant}`);\n        const clone = template.content.cloneNode(true);\n        this.$container.classList.add(this.$variant);\n        this.$container.appendChild(clone);\n        document.body.appendChild(this.$container);\n        if (this.$variant === 'tooltip') {\n            this.$container.dispatchEvent(new CustomEvent('position', {\n                detail: {\n                    rect: ev.target.getBoundingClientRect(),\n                },\n            }));\n        }\n        const closeButton = this.$container.querySelector('.dialog-close-button');\n        if (closeButton) {\n            closeButton.addEventListener('click', (ev) => {\n                this.onClose();\n            });\n        }\n        this.$state = 'open';\n        // append this instance of the DialogComponent to document.body\n        window.__dialogStack.pushDialog(this.$container);\n    }\n    onClose() {\n        window.__dialogStack.removeDialog(this.$container);\n        window.__dialogStack.removeTemplate(this.$targetSelector);\n        this.$state = 'closed';\n    }\n    setTarget(selector) {\n        this.$targetSelector = selector;\n        this.$target = query(this.$targetSelector);\n        if (!this.$target) {\n            console.error(`DialogComponent cannot find HTMLElement with selector ${selector}`);\n            return;\n        }\n        this.$target.addEventListener('click', this.targetListener.bind(this), false);\n    }\n    targetListener(ev) {\n        if (this.$state !== 'open') {\n            this.onOpen(ev);\n        }\n    }\n    disconnectedCallback() {\n        window.__dialogStack.removeTemplate(this.$targetSelector);\n    }\n}",
          "description": "Controller for rendering a dialog from HTML template.\n\n`DialogComponent` requires an instance of `DialogStack` to be set on `window.__dialogStack` prior to instantiation. After specifying a `template`, `target`, and `variant` with HTML attributes, `DialogComponent` will display either a modal or tooltip that renders a HTML template."
        },
        {
          "kind": "variable",
          "name": "ModalComponent",
          "default": "class ModalComponent extends HTMLElement {\n    constructor() {\n        super();\n        attachShadow(this, {\n            mode: 'open',\n        });\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "TooltipComponent",
          "default": "class TooltipComponent extends HTMLElement {\n    constructor() {\n        super();\n        attachShadow(this, {\n            mode: 'open',\n        });\n    }\n    onPosition(ev) {\n        const rect = ev.detail.rect;\n        const leftDisplacement = this.$child.getBoundingClientRect().width / 2;\n        this.style.top = `${rect.bottom + 12}px`;\n        this.style.left = `${rect.left - leftDisplacement}px`;\n        this.style.width = `${this.$child.getBoundingClientRect().width}px`;\n        this.style.height = `${this.$child.getBoundingClientRect().height}px`;\n        this.style.visibility = 'visible';\n    }\n    // since the card component is not a direct descendant of TooltipComponent, we need this getter\n    get $child() {\n        return this.shadowRoot.querySelector('slot').assignedNodes()[0];\n    }\n}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "DialogStack",
          "members": [
            {
              "kind": "method",
              "name": "registerTemplate",
              "parameters": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeTemplate",
              "parameters": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "kind": "method",
              "name": "findDialogIndex",
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "findTemplateIndex",
              "parameters": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusDialog",
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "pushDialog",
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeDialog",
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setZIndices"
            },
            {
              "kind": "method",
              "name": "addListeners"
            },
            {
              "kind": "method",
              "name": "onFocus",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "field",
              "name": "stack",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "templateId",
              "type": {
                "text": "array"
              },
              "default": "[]"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "target"
        },
        {
          "kind": "function",
          "name": "validate",
          "parameters": [
            {
              "name": "elem"
            },
            {
              "name": "showError"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "TextInputComponent",
          "default": "class TextInputComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.$attr = {};\n        attachShadow(this);\n        this.internals = this.attachInternals();\n    }\n    connectedCallback() {\n        for (let prop in this.$attr) {\n            this.$input.setAttribute(prop, this.$attr[prop]);\n        }\n        validate(this, false);\n    }\n    formDisabledCallback(disabled) {\n        this.disabled = disabled;\n    }\n    formStateRestoreCallback(state, mode) {\n        this.value = state;\n    }\n    formResetCallback(state) {\n        this.value = this.getAttribute('value') || '';\n    }\n    attributeChangedCallback(name, prev, next) {\n        this.$attr[name] = next;\n        switch (name) {\n            case 'value':\n                this.value = next;\n                break;\n            case 'disabled':\n                this.disabled = next;\n                break;\n            case 'required':\n                this.required = next;\n                break;\n            case 'type':\n                this.$input.setAttribute('type', next);\n                break;\n            case 'minlength':\n                this.$input.setAttribute('minlength', next);\n                break;\n            case 'maxlength':\n                this.$input.setAttribute('maxlength', next);\n                break;\n            case 'pattern':\n                this.$input.setAttribute('pattern', next);\n                break;\n            case 'list':\n                this.$input.setAttribute('list', next);\n                break;\n            case 'placeholder':\n                this.$input.setAttribute('placeholder', next);\n                break;\n            case 'readonly':\n                this.$input.setAttribute('readonly', next);\n                break;\n            case 'spellcheck':\n                this.$input.setAttribute('spellcheck', next);\n                break;\n        }\n    }\n    static get observedAttributes() {\n        return [\n            'name',\n            'type',\n            'required',\n            'minlength',\n            'maxlength',\n            'pattern',\n            'list',\n            'placeholder',\n            'readonly',\n            'spellcheck',\n            'disabled',\n            'value',\n        ];\n    }\n    get $input() {\n        return this.shadowRoot.querySelector('input');\n    }\n    get validity() {\n        return this.internals.validity;\n    }\n    get validationMessage() {\n        return this.internals.validationMessage;\n    }\n    get list() {\n        return this.$input.list;\n    }\n    get minLength() {\n        return this.$input.minLength;\n    }\n    set minLength(min) {\n        this.$input.minLength = min;\n    }\n    get maxLength() {\n        return this.$input.maxLength;\n    }\n    set maxLength(max) {\n        this.$input.maxLength = max;\n    }\n    get readOnly() {\n        return this.$input.readOnly;\n    }\n    get pattern() {\n        return this.$input.pattern;\n    }\n    set pattern(pattern) {\n        this.$input.pattern = pattern;\n    }\n    get placeholder() {\n        return this.$input.placeholder;\n    }\n    get spellcheck() {\n        return this.$input.spellcheck;\n    }\n    get type() {\n        var _a;\n        return (_a = this.$input.type) !== null && _a !== void 0 ? _a : 'text';\n    }\n    set type(type) {\n        this.$input.setAttribute('type', type);\n    }\n    get disabled() {\n        return this.$input.disabled;\n    }\n    set disabled(value) {\n        if (value === 'true' || value === true) {\n            this.$input.setAttribute('disabled', 'true');\n        }\n        if (value === 'false' || value == false) {\n            this.$input.removeAttribute('disabled');\n        }\n    }\n    get required() {\n        return this.$input.required;\n    }\n    set required(value) {\n        if (value === 'true' || value === true) {\n            this.$input.setAttribute('required', 'true');\n        }\n        if (value === 'false' || value === false) {\n            this.$input.removeAttribute('required');\n        }\n    }\n    get value() {\n        return this.$input.value;\n    }\n    set value(value) {\n        this.$input.value = value;\n    }\n    checkValidity() {\n        return this.internals.checkValidity();\n    }\n    reportValidity() {\n        return this.internals.reportValidity();\n    }\n    setValidity(flags, message, anchor) {\n        this.internals.setValidity(flags, message, anchor);\n    }\n    onValidate() {\n        validate(this, true);\n    }\n    onChange() {\n        this.shadowRoot.querySelector('.message').innerHTML = '';\n        this.$input.classList.remove('error');\n        this.$input.removeAttribute('aria-invalid');\n        this.internals.setFormValue(this.value, this.value);\n    }\n    focus() {\n        this.$input.focus();\n    }\n    blur() {\n        this.$input.blur();\n    }\n}",
          "description": "Renders an input element."
        },
        {
          "kind": "variable",
          "name": "TableComponent",
          "default": "class TableComponent extends HTMLTableElement {\n    constructor() {\n        super();\n        // the index of the cell currently being edited\n        this.editIndex = 0;\n        attachTemplate(this);\n        attachStyle(this);\n    }\n    // listen for changes on the channel attribute\n    static get observedAttributes() {\n        return ['channel'];\n    }\n    attributeChangedCallback(name, prev, next) {\n        switch (name) {\n            case 'channel':\n                // create a new BroadcastChannel with the value of the channel attribute and assign it to the channel property\n                this.channel = new BroadcastChannel(next);\n                // assign the onMessage() function to the onmessage property of the channel object\n                // bind(this) makes the TableComponent the context of the onMessage function\n                this.channel.onmessage = this.onMessage.bind(this);\n                break;\n        }\n    }\n    // will be invoked when there are changes on the channel object\n    onMessage(ev) {\n        // check the type of the message being received on the channel object then call the appropriate function\n        switch (ev.data.type) {\n            case 'data':\n                this.onTableData(ev.data.detail);\n                break;\n            case 'add':\n                this.onAdd();\n                break;\n            case 'edit':\n                this.onEdit();\n                break;\n            case 'readOnly':\n                this.onReadOnly();\n                break;\n            case 'save':\n                this.onSave();\n                break;\n        }\n    }\n    onAdd() {\n        if (!this.savedState) {\n            // copy and save the current state of the table\n            this.savedState = JSON.parse(JSON.stringify(this.state));\n        }\n        const rowData = this.blankRowData;\n        const tr = document.createElement('tr', { is: 'in-tr' });\n        // create a custom tdComponent for each object in the columnData array\n        this.columnData.forEach((colData) => {\n            const td = document.createElement('td', { is: 'in-td' });\n            if (colData.align) {\n                td.align = colData.align;\n            }\n            // set the tdComponents data-property attribute equal to the relevent column property\n            // this is needed to track changes to the input in edit mode\n            td.setAttribute('data-property', colData.property);\n            // set the tdComponents value attribute equal to the relevant value based on the column heading\n            // this will be used to set the inner text inside the the custom tdComponent\n            td.setAttribute('value', rowData[colData.property]);\n            // set the td element as editable\n            td.setAttribute('readonly', 'false');\n            tr.appendChild(td);\n        });\n        // append delete button to the tr element\n        this.createDeleteButton(tr);\n        // append the tr element to the table body\n        this.$body.appendChild(tr);\n        // dispatch a 'data' event on our custom trComponent, passing in the current row data\n        tr.dispatchEvent(new CustomEvent('data', {\n            detail: rowData,\n        }));\n        // pass the handleCellListeners function to each tdComponent, binding the tableComponent as the context with 'this'\n        this.$cells.forEach(this.handleCellListeners.bind(this));\n        // set the edit index to the index of the first TdComponent in the blank row\n        this.editIndex = Array.from(this.$cells).indexOf(tr.children[0]);\n        // focus the first input when edit mode is initiated\n        this.onNext();\n    }\n    onEdit() {\n        if (!this.savedState) {\n            // copy and save the current state of the table\n            this.savedState = JSON.parse(JSON.stringify(this.state));\n        }\n        // pass the handleCellListeners function to each tdComponent, binding the tableComponent as the context with 'this'\n        this.$cells.forEach(this.handleCellListeners.bind(this));\n        // focus the first input when edit mode is initiated\n        this.onNext();\n    }\n    onReadOnly() {\n        this.$cells.forEach((td) => {\n            td.setAttribute('readonly', 'true');\n        });\n        if (this.savedState) {\n            // reset the rows back to their previous state after the user presses the cancel button, then clear the saved state\n            this.renderRows(this.savedState);\n            this.savedState = undefined;\n        }\n        // set the edit index to 0 in preparation for when editMode() is called again\n        this.editIndex = 0;\n    }\n    onSave() {\n        // save the current table state in a scoped variable\n        // do we need this? (could we not just access this.state directly?)\n        const data = this.state;\n        // set the readonly attribute to true on the cell that was last edited\n        // do we need this? (all cells will be set to readonly in renderRows called below)\n        if (this.$cells[this.editIndex]) {\n            this.$cells[this.editIndex].setAttribute('readonly', 'true');\n        }\n        // reset the savedState and editIndex\n        this.savedState = undefined;\n        // do we need this? (already being handled inside onReadOnly)\n        this.editIndex = 0;\n        const validRows = this.validateRows(data);\n        // post a 'change' message on the channel object, which will be listened for outside of the context of TableComponent\n        this.channel.postMessage({\n            type: 'change',\n            detail: validRows,\n        });\n        this.renderRows(validRows);\n    }\n    // method for reacting to the 'data' message type\n    // 'next' is the data.detail which contains the column and row data\n    onTableData(next) {\n        this.renderHeader(next.columnData);\n        this.renderRows(next.rowData);\n    }\n    // method for adding delete button to table row\n    createDeleteButton(tr) {\n        const deleteButtonTd = document.createElement('td');\n        deleteButtonTd.classList.add('delete-cell');\n        deleteButtonTd.setAttribute('readonly', 'true');\n        // get the delete button template defined in client/src/template.html\n        const deleteButtonTemplate = document.querySelector('[data-template-id=\"button-delete\"]');\n        // clone and append the delete button template to the table row that was passed\n        deleteButtonTd.appendChild(deleteButtonTemplate.content.cloneNode(true));\n        tr.appendChild(deleteButtonTd);\n    }\n    // method for handling mouse and keyboard events on our textInputComponent within each cell\n    handleCellListeners(td, index) {\n        // get the parent trComponent of the tdComponent\n        const tr = td.parentNode;\n        // get the child textInputComponent of the tdComponent\n        const input = td.querySelector('in-textinput');\n        // query for the delete button\n        const button = td.querySelector('[is=\"in-button\"]');\n        // check if the textInputComponent exists (we may choose to add elements other than textInputComponent inside our tdComponent later)\n        if (input) {\n            // set the textInputComponents value equal to that of the 'value' attribute on its parent tdComponent\n            input.value = td.getAttribute('value');\n            // set the readonly attribute to false, thus hiding the cells text content and displaying its input component\n            td.setAttribute('readonly', 'false');\n            // set the edit index equal to the index of the tdComponent currently being edited\n            input.onclick = (ev) => {\n                this.editIndex = Array.from(this.$cells).indexOf(td);\n            };\n            input.onkeyup = (ev) => {\n                // set the tdComponents value equal to the current state on the input whenever a key is pressed\n                td.setAttribute('value', input.value);\n                // dispatch a custom patch event on the trComponent with the updated cell information\n                tr.dispatchEvent(new CustomEvent('patch', {\n                    detail: {\n                        property: td.dataset.property,\n                        changes: td.getAttribute('value'),\n                    },\n                }));\n            };\n            input.onkeydown = (ev) => {\n                // prevent the browsers default event bubbling\n                ev.stopPropagation();\n                if (ev.key === 'Tab') {\n                    // on tab, set the edit index to that of the cell currently being edited\n                    this.editIndex = index;\n                    // focus the next input\n                    this.onNext();\n                }\n            };\n        }\n        // if the current td element has a delete button\n        if (button) {\n            // show the button\n            td.setAttribute('readonly', 'false');\n            // on click, dispatch a custom delete event on the cells parent trComponent\n            button.onclick = () => {\n                this.editIndex = index;\n                td.parentNode.dispatchEvent(new CustomEvent('delete'));\n            };\n            // on enter or select keys, dispatch a custom delete event on the cells parent trComponent\n            button.onkeydown = (ev) => {\n                ev.stopPropagation();\n                if (ev.key === 'Tab') {\n                    this.editIndex = index;\n                    this.onNext();\n                }\n                if (ev.key === 'Enter' || ev.key === 'Select') {\n                    this.editIndex = index;\n                    this.onNext();\n                    td.parentNode.dispatchEvent(new CustomEvent('delete'));\n                }\n            };\n        }\n    }\n    // method for handling focus of the inputs in edit mode\n    onNext() {\n        // if a cell does not exist at the current edit index, return so no further code is executed\n        if (!this.$cells[this.editIndex]) {\n            return;\n        }\n        // focus the child textInputComponent of the cell currently being edited\n        const input = this.$cells[this.editIndex].querySelector('in-textinput');\n        if (input) {\n            input.focus();\n        }\n    }\n    renderHeader(cols) {\n        // sort the columns properly from left to right based on the index property\n        this.columnData = cols.sort((a, b) => a.index - b.index);\n        // create a standard tr component which will contain the column heading (th) elements\n        const tr = document.createElement('tr');\n        // create a column heading (th) element for each object in the columnData array\n        cols.forEach((colData) => {\n            const th = document.createElement('th');\n            th.innerText = colData.label;\n            if (colData.span) {\n                th.colSpan = colData.span;\n            }\n            if (colData.align) {\n                th.align = colData.align;\n            }\n            // append the created column heading to the tr element we created\n            tr.appendChild(th);\n        });\n        // clear the current thead element to allow re-rendering with different columns\n        this.$head.innerHTML = '';\n        // append the tr element to the thead element we created in the TableComponent template\n        this.$head.appendChild(tr);\n    }\n    renderRows(rows) {\n        // clear the tbody element to allow users to replace the data displayed in the table\n        this.$body.innerHTML = '';\n        // create a custom trComponent for each object in the rows array\n        rows.forEach((rowData) => {\n            const tr = document.createElement('tr', { is: 'in-tr' });\n            // create a custom tdComponent for each object in the columnData array\n            this.columnData.forEach((colData) => {\n                const td = document.createElement('td', { is: 'in-td' });\n                if (colData.align) {\n                    td.align = colData.align;\n                }\n                // set the tdComponents data-property attribute equal to the relevent column property\n                // this is needed to track changes to the input in edit mode\n                td.setAttribute('data-property', colData.property);\n                // set the tdComponents value attribute equal to the relevant value based on the column heading\n                // this will be used to set the inner text inside the the custom tdComponent\n                td.setAttribute('value', rowData[colData.property]);\n                // set the td element to readonly on initial render\n                td.setAttribute('readonly', 'true');\n                // append the td element to the tr element we created\n                tr.appendChild(td);\n            });\n            // append delete button to the tr element\n            this.createDeleteButton(tr);\n            // append the tr element to the table body\n            this.$body.appendChild(tr);\n            // dispatch a 'data' event on our custom trComponent, passing in the current row data\n            tr.dispatchEvent(new CustomEvent('data', {\n                detail: rowData,\n            }));\n            this.blankRowData = {};\n            this.columnData.forEach((colData) => {\n                this.blankRowData[colData.property] = '';\n            });\n        });\n    }\n    validateRows(data) {\n        return data.filter((rowData) => {\n            let hasData = false;\n            for (let key in rowData) {\n                if (rowData[key].length > 0) {\n                    hasData = true;\n                }\n            }\n            return hasData;\n        });\n    }\n    // get an array of current row data objects, accessible on the $rowData property of our custom trComponent\n    get state() {\n        return Array.from(this.querySelector('tbody').querySelectorAll('tr')).map((tr) => tr.$rowData);\n    }\n    // element getters\n    get $head() {\n        return this.querySelector('thead');\n    }\n    get $body() {\n        return this.querySelector('tbody');\n    }\n    get $cells() {\n        return this.querySelectorAll('td');\n    }\n}",
          "description": "Renders a stylized `HTMLTableElement` that can display read-only or editable.\n`TableComponent` is a customized built-in element that renders columns and rows through events dispatched on `BroadcastChannel`."
        },
        {
          "kind": "variable",
          "name": "TableCardComponent",
          "default": "class TableCardComponent extends HTMLElement {\n    constructor() {\n        super();\n        attachShadow(this, { mode: 'open' });\n    }\n    connectedCallback() {\n        const addButtonTemplate = document.querySelector('[data-template-id=\"button-add\"]');\n        this.$crudActions.appendChild(addButtonTemplate.content.cloneNode(true));\n    }\n    // listen for changes on the channel attribute\n    static get observedAttributes() {\n        return ['channel'];\n    }\n    attributeChangedCallback(name, prev, next) {\n        switch (name) {\n            case 'channel':\n                // create a new BroadcastChannel with the value of the channel attribute and assign it to the channel property\n                this.channel = new BroadcastChannel(next);\n                // set the channel attribute on the child TableComponent with the value of the channel attribute on the TableCardComponent\n                this.$table.setAttribute('channel', next);\n                break;\n        }\n    }\n    readOnlyMode() {\n        this.$editButton.removeAttribute('hidden');\n        this.$saveButton.setAttribute('hidden', 'true');\n        this.$cancelButton.setAttribute('hidden', 'true');\n        // post a 'readOnly' message via the channel object, no payload is needed here since this simply acts like an on switch\n        this.channel.postMessage({\n            type: 'readOnly',\n        });\n    }\n    editMode() {\n        this.$editButton.setAttribute('hidden', 'true');\n        this.$saveButton.removeAttribute('hidden');\n        this.$cancelButton.removeAttribute('hidden');\n        // post an 'edit' message via the channel object, no payload is needed here since this simply acts like an on switch\n        this.channel.postMessage({\n            type: 'edit',\n        });\n    }\n    save() {\n        // post a 'save' message via the channel object, no payload is needed here since this simply acts like an on switch\n        this.channel.postMessage({\n            type: 'save',\n        });\n        // call the readOnlyMode function which will handle hiding and showing the appropriate buttons and associated table behaviour\n        this.readOnlyMode();\n    }\n    add() {\n        // remove focus from the add button\n        // do we need this?\n        this.$addButton.blur();\n        this.$editButton.setAttribute('hidden', 'true');\n        this.$saveButton.removeAttribute('hidden');\n        this.$cancelButton.removeAttribute('hidden');\n        // post an 'add' message via the channel object, no payload is needed here since this simply acts like an on switch\n        this.channel.postMessage({\n            type: 'add',\n        });\n    }\n    // element getters using the shadowRoot because TableCardComponent is an autonomous custom element\n    get $table() {\n        return this.shadowRoot.querySelector('table');\n    }\n    get $crudActions() {\n        return this.shadowRoot.querySelector('.crud-actions');\n    }\n    get $addButton() {\n        return this.shadowRoot.querySelector('.button-add');\n    }\n    get $editButton() {\n        return this.shadowRoot.querySelector('.button-edit');\n    }\n    get $saveButton() {\n        return this.shadowRoot.querySelector('.button-save');\n    }\n    get $cancelButton() {\n        return this.shadowRoot.querySelector('.button-cancel');\n    }\n}",
          "description": "Renders a `TableComponent` in a stylized card\nthat displays buttons used for CRUD in the table."
        },
        {
          "kind": "variable",
          "name": "TdComponent",
          "default": "class TdComponent extends HTMLTableCellElement {\n    constructor() {\n        super();\n        attachTemplate(this);\n    }\n    connectedCallback() {\n        attachStyle(this);\n    }\n    // listen for changes on the value and readonly attributes\n    static get observedAttributes() {\n        return ['value', 'readonly'];\n    }\n    attributeChangedCallback(name, prev, next) {\n        switch (name) {\n            case 'value':\n                this.setValue(next);\n                break;\n            case 'readonly':\n                // since all html attribute values are passed as strings and our setMode() method expects a boolean, evaluate this as a boolean\n                this.setMode(next === 'true');\n                break;\n        }\n    }\n    // set the inner text to the value of the 'value' attribute\n    setValue(value) {\n        this.$readOnly.innerText = value;\n    }\n    // toggles the visibility between the textInputComponent or the span displaying the readonly value\n    setMode(readOnly) {\n        if (readOnly) {\n            this.$readOnly.removeAttribute('hidden');\n            this.$inputContainer.setAttribute('hidden', 'true');\n        }\n        else {\n            this.$readOnly.setAttribute('hidden', 'true');\n            this.$inputContainer.removeAttribute('hidden');\n        }\n    }\n    // element getters\n    get $readOnly() {\n        return this.querySelector('.td-readonly');\n    }\n    get $input() {\n        return this.querySelector('in-textinput');\n    }\n    get $inputContainer() {\n        return this.querySelector('.td-input');\n    }\n}"
        },
        {
          "kind": "variable",
          "name": "TrComponent",
          "default": "class TrComponent extends HTMLTableRowElement {\n    constructor() {\n        super();\n    }\n    // listen for the custom 'data' event dispatched from this component in the renderRows() method of the parent TableComponent\n    setValue(ev) {\n        this.$rowData = ev.detail;\n    }\n    // update the relevant property on our rowData object\n    patchData(ev) {\n        this.$rowData[ev.detail.property] = ev.detail.changes;\n    }\n    // remove this TrComponent from the table\n    delete() {\n        this.parentNode.removeChild(this);\n    }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "target",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "target",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "dist/fesm2015/index.js"
          }
        },
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "dist/fesm2015/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "./src/button"
          }
        },
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "./src/card"
          }
        },
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "./src/dialog"
          }
        },
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "./src/input"
          }
        },
        {
          "kind": "js",
          "name": "Column",
          "declaration": {
            "name": "Column",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "ColumnData",
          "declaration": {
            "name": "ColumnData",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "./src/table"
          }
        },
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "./src/table"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.stories.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Primary"
        },
        {
          "kind": "variable",
          "name": "Secondary"
        },
        {
          "kind": "variable",
          "name": "Icon"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/button/Button.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/button/Button.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Secondary",
          "declaration": {
            "name": "Secondary",
            "module": "src/button/Button.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/button/Button.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/button/Button.stories.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/Button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Customized built-in element that renders a styled button.\n\n`ButtonComponent` is displayed contextually as one of three variants: primary, secondary or icon. The variant is set using a CSS classname. The label is set via the content of the `HTMLButtonElement`. When displayed as the icon variant, ButtonComponent expects two direct children: `HTMLSVGElement` and `HTMLSpanElement` that displays a label exclusively for screen readers using the `hidden` HTML attribute.",
          "name": "ButtonComponent",
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "\"in-button\", Required",
              "name": "is"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Variant, can either be \"primary\" \"secondary\", or \"icon\"",
              "name": "class"
            }
          ],
          "superclass": {
            "name": "HTMLButtonElement",
            "module": "src/button/Button.ts"
          },
          "tagName": "in-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "src/button/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "./Button"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/Card.stories.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ImageCard"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/card/Card.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "ImageCard",
          "declaration": {
            "name": "ImageCard",
            "module": "src/card/Card.stories.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/Card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Autonomous custom element that renders a card container.\n`CardComponent` displays content in a header, content, footer layout.",
          "name": "CardComponent",
          "slots": [
            {
              "type": {
                "text": "string"
              },
              "description": "displays header elements",
              "name": "header"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "displays content in between header and footer",
              "name": "content"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "displays footer elements",
              "name": "footer"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "src/card/Card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "./Card"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/input/TextInput.stories.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Primary"
        },
        {
          "kind": "variable",
          "name": "Disabled"
        },
        {
          "kind": "variable",
          "name": "Error"
        },
        {
          "kind": "variable",
          "name": "Form"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/input/TextInput.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/input/TextInput.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/input/TextInput.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/input/TextInput.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Form",
          "declaration": {
            "name": "Form",
            "module": "src/input/TextInput.stories.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/input/TextInput.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders an input element.",
          "name": "TextInputComponent",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "IElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attachInternals",
              "type": {
                "text": "() => IElementInternals"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$validator",
              "type": {
                "text": "Validator"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$attr",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled"
                }
              ]
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "mode",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "validity"
            },
            {
              "kind": "field",
              "name": "validationMessage"
            },
            {
              "kind": "field",
              "name": "list"
            },
            {
              "kind": "field",
              "name": "minLength"
            },
            {
              "kind": "field",
              "name": "maxLength"
            },
            {
              "kind": "field",
              "name": "readOnly"
            },
            {
              "kind": "field",
              "name": "pattern"
            },
            {
              "kind": "field",
              "name": "placeholder"
            },
            {
              "kind": "field",
              "name": "spellcheck"
            },
            {
              "kind": "field",
              "name": "type"
            },
            {
              "kind": "field",
              "name": "disabled"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onValidate"
            },
            {
              "kind": "method",
              "name": "onChange"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "blur"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Name of the form control. Submitted with the form as part of a name/value pair"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "Type of form control"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": " A value is required or must be check for the form to be submittable"
            },
            {
              "name": "minlength",
              "type": {
                "text": "string"
              },
              "description": "Minimum length (number of characters) of value"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "string"
              },
              "description": "Maximum length (number of characters) of value"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "Pattern the value must match to be valid"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Value of the id attribute of the <datalist> of autocomplete options"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Text that appears in the form control when it has no value set"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "The value is not editable"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "string"
              },
              "description": "Defines whether the element may be checked for spelling errors."
            },
            {
              "name": "disabled"
            },
            {
              "name": "value"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Size of the control",
              "name": "size"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-textinput",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "src/input/TextInput.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/input/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "./TextInput"
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "./validator"
          }
        },
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "./validator"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/input/validator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "validate",
          "parameters": [
            {
              "name": "elem",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "showError",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "src/input/validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/Dialog.stories.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Primary"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/dialog/Dialog.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/dialog/Dialog.stories.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/Dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controller for rendering a dialog from HTML template.\n\n`DialogComponent` requires an instance of `DialogStack` to be set on `window.__dialogStack` prior to instantiation. After specifying a `template`, `target`, and `variant` with HTML attributes, `DialogComponent` will display either a modal or tooltip that renders a HTML template.",
          "name": "DialogComponent",
          "members": [
            {
              "kind": "field",
              "name": "$container",
              "type": {
                "text": "Element"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$state",
              "type": {
                "text": "'open' | 'closed'"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$target",
              "type": {
                "text": "Element"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$targetSelector",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$templateSelector",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "$variant",
              "type": {
                "text": "'modal' | 'tooltip'"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "onOpen",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onClose"
            },
            {
              "kind": "method",
              "name": "setTarget",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "targetListener",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "Selector that targets the HTML element that triggers the dialog on click, for use with `querySelector`, Required"
            },
            {
              "name": "template",
              "type": {
                "text": "string"
              },
              "description": "Required, Selector that targets the HTML template, for use with `querySelector`."
            },
            {
              "name": "variant",
              "type": {
                "text": "string"
              },
              "description": "Specifies whether to display a \"modal\" or \"tooltip\", Required"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "src/dialog/Dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/DialogStack.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DialogStack",
          "members": [
            {
              "kind": "field",
              "name": "stack",
              "type": {
                "text": "Element[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "templateId",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "last",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "method",
              "name": "registerTemplate",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeTemplate",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findDialogIndex",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findTemplateIndex",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusDialog",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pushDialog",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeDialog",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setZIndices"
            },
            {
              "kind": "method",
              "name": "addListeners"
            },
            {
              "kind": "method",
              "name": "onFocus",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "src/dialog/DialogStack.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/Modal.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ModalComponent",
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "src/dialog/Modal.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/Tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TooltipComponent",
          "members": [
            {
              "kind": "method",
              "name": "onPosition",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$child",
              "type": {
                "text": "Element"
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "src/dialog/Tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "./Dialog"
          }
        },
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "./Modal"
          }
        },
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "./Tooltip"
          }
        },
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "./DialogStack"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/Table.stories.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Primary"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/table/Table.stories.js"
          }
        },
        {
          "kind": "js",
          "name": "Primary",
          "declaration": {
            "name": "Primary",
            "module": "src/table/Table.stories.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/Table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders a stylized `HTMLTableElement` that can display read-only or editable.\n`TableComponent` is a customized built-in element that renders columns and rows through events dispatched on `BroadcastChannel`.",
          "name": "TableComponent",
          "members": [
            {
              "kind": "field",
              "name": "channel",
              "type": {
                "text": "BroadcastChannel"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "columnData",
              "type": {
                "text": "ColumnData"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "savedState",
              "type": {
                "text": "any[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "editIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "blankRowData",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onMessage",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onAdd"
            },
            {
              "kind": "method",
              "name": "onEdit"
            },
            {
              "kind": "method",
              "name": "onReadOnly"
            },
            {
              "kind": "method",
              "name": "onSave"
            },
            {
              "kind": "method",
              "name": "onTableData",
              "parameters": [
                {
                  "name": "next"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createDeleteButton",
              "parameters": [
                {
                  "name": "tr"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCellListeners",
              "parameters": [
                {
                  "name": "td",
                  "type": {
                    "text": "TdComponent"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onNext"
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "parameters": [
                {
                  "name": "cols",
                  "type": {
                    "text": "ColumnData"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderRows",
              "parameters": [
                {
                  "name": "rows",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateRows",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "TrComponent[]"
              }
            },
            {
              "kind": "field",
              "name": "$head"
            },
            {
              "kind": "field",
              "name": "$body"
            },
            {
              "kind": "field",
              "name": "$cells"
            }
          ],
          "attributes": [
            {
              "name": "channel",
              "type": {
                "text": "string"
              },
              "description": "the name of the channel used to communicate via `BroadcastChannel`, Required"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "\"in-table\", Required",
              "name": "is"
            }
          ],
          "superclass": {
            "name": "HTMLTableElement",
            "module": "src/table/Table.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "src/table/Table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/TableCard.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders a `TableComponent` in a stylized card\nthat displays buttons used for CRUD in the table.",
          "name": "TableCardComponent",
          "members": [
            {
              "kind": "field",
              "name": "channel",
              "type": {
                "text": "BroadcastChannel"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "readOnlyMode"
            },
            {
              "kind": "method",
              "name": "editMode"
            },
            {
              "kind": "method",
              "name": "save"
            },
            {
              "kind": "method",
              "name": "add"
            },
            {
              "kind": "field",
              "name": "$table",
              "type": {
                "text": "HTMLTableElement"
              }
            },
            {
              "kind": "field",
              "name": "$crudActions",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$addButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$editButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$saveButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$cancelButton",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "attributes": [
            {
              "name": "channel",
              "type": {
                "text": "string"
              },
              "description": "the name of the channel used to communicate via `BroadcastChannel`, Required"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-tablecard",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "src/table/TableCard.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/Td.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TdComponent",
          "members": [
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setMode",
              "parameters": [
                {
                  "name": "readOnly",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$readOnly",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "field",
              "name": "$input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "$inputContainer",
              "type": {
                "text": "HTMLSpanElement"
              }
            }
          ],
          "attributes": [
            {
              "name": "value"
            },
            {
              "name": "readonly"
            }
          ],
          "superclass": {
            "name": "HTMLTableCellElement",
            "module": "src/table/Td.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "src/table/Td.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/Tr.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TrComponent",
          "members": [
            {
              "kind": "field",
              "name": "$rowData",
              "type": {
                "text": "any"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "patchData",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete"
            }
          ],
          "superclass": {
            "name": "HTMLTableRowElement",
            "module": "src/table/Tr.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "src/table/Tr.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/table/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "ColumnData",
          "declaration": {
            "name": "ColumnData",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "Column",
          "declaration": {
            "name": "Column",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "./TableCard"
          }
        },
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "./Td"
          }
        },
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "./Tr"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/button/Button.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Customized built-in element that renders a styled button.\n\n`ButtonComponent` is displayed contextually as one of three variants: primary, secondary or icon. The variant is set using a CSS classname. The label is set via the content of the `HTMLButtonElement`. When displayed as the icon variant, ButtonComponent expects two direct children: `HTMLSVGElement` and `HTMLSpanElement` that displays a label exclusively for screen readers using the `hidden` HTML attribute.",
          "name": "ButtonComponent",
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "\"in-button\", Required",
              "name": "is"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Variant, can either be \"primary\" \"secondary\", or \"icon\"",
              "name": "class"
            }
          ],
          "superclass": {
            "name": "HTMLButtonElement",
            "module": "dist/types/src/button/Button.d.ts"
          },
          "tagName": "in-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "dist/types/src/button/Button.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/button/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonComponent",
          "declaration": {
            "name": "ButtonComponent",
            "module": "./Button"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/card/Card.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Autonomous custom element that renders a card container.\n`CardComponent` displays content in a header, content, footer layout.",
          "name": "CardComponent",
          "slots": [
            {
              "type": {
                "text": "string"
              },
              "description": "displays header elements",
              "name": "header"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "displays content in between header and footer",
              "name": "content"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "displays footer elements",
              "name": "footer"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "dist/types/src/card/Card.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/card/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CardComponent",
          "declaration": {
            "name": "CardComponent",
            "module": "./Card"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/dialog/Dialog.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controller for rendering a dialog from HTML template.\n\n`DialogComponent` requires an instance of `DialogStack` to be set on `window.__dialogStack` prior to instantiation. After specifying a `template`, `target`, and `variant` with HTML attributes, `DialogComponent` will display either a modal or tooltip that renders a HTML template.",
          "name": "DialogComponent",
          "members": [
            {
              "kind": "field",
              "name": "$container",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "$state",
              "type": {
                "text": "'open' | 'closed'"
              }
            },
            {
              "kind": "field",
              "name": "$target",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "$targetSelector",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "$templateSelector",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "$variant",
              "type": {
                "text": "'modal' | 'tooltip'"
              }
            },
            {
              "kind": "method",
              "name": "onOpen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onClose",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "targetListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "Required, Selector that targets the HTML template, for use with `querySelector`.",
              "name": "template"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Selector that targets the HTML element that triggers the dialog on click, for use with `querySelector`, Required",
              "name": "target"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Specifies whether to display a \"modal\" or \"tooltip\", Required",
              "name": "variant"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "dist/types/src/dialog/Dialog.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/dialog/DialogStack.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DialogStack",
          "members": [
            {
              "kind": "field",
              "name": "stack",
              "type": {
                "text": "Element[]"
              }
            },
            {
              "kind": "field",
              "name": "templateId",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "last",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "method",
              "name": "registerTemplate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeTemplate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findDialogIndex",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findTemplateIndex",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusDialog",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pushDialog",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeDialog",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setZIndices",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "dist/types/src/dialog/DialogStack.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/dialog/Modal.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ModalComponent",
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "dist/types/src/dialog/Modal.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/dialog/Tooltip.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TooltipComponent",
          "members": [
            {
              "kind": "method",
              "name": "onPosition",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$child",
              "type": {
                "text": "Element"
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "dist/types/src/dialog/Tooltip.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/dialog/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "DialogComponent",
          "declaration": {
            "name": "DialogComponent",
            "module": "./Dialog"
          }
        },
        {
          "kind": "js",
          "name": "ModalComponent",
          "declaration": {
            "name": "ModalComponent",
            "module": "./Modal"
          }
        },
        {
          "kind": "js",
          "name": "TooltipComponent",
          "declaration": {
            "name": "TooltipComponent",
            "module": "./Tooltip"
          }
        },
        {
          "kind": "js",
          "name": "DialogStack",
          "declaration": {
            "name": "DialogStack",
            "module": "./DialogStack"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/input/TextInput.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders an input element.",
          "name": "TextInputComponent",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attachInternals",
              "type": {
                "text": "() => IElementInternals"
              }
            },
            {
              "kind": "field",
              "name": "$validator",
              "type": {
                "text": "Validator"
              }
            },
            {
              "kind": "field",
              "name": "$attr",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "mode",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onValidate",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "Name of the form control. Submitted with the form as part of a name/value pair",
              "name": "name"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Type of form control",
              "name": "type"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": " A value is required or must be check for the form to be submittable",
              "name": "required"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Minimum length (number of characters) of value",
              "name": "minlength"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Maximum length (number of characters) of value",
              "name": "maxlength"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Pattern the value must match to be valid",
              "name": "pattern"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Value of the id attribute of the <datalist> of autocomplete options",
              "name": "list"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Text that appears in the form control when it has no value set",
              "name": "placeholder"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "The value is not editable",
              "name": "readonly"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Size of the control",
              "name": "size"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "Defines whether the element may be checked for spelling errors.",
              "name": "spellcheck"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-textinput",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "dist/types/src/input/TextInput.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/input/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TextInputComponent",
          "declaration": {
            "name": "TextInputComponent",
            "module": "./TextInput"
          }
        },
        {
          "kind": "js",
          "name": "Validator",
          "declaration": {
            "name": "Validator",
            "module": "./validator"
          }
        },
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "./validator"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/input/validator.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "validate",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "elem",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "showError",
              "type": {
                "text": "boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "validate",
          "declaration": {
            "name": "validate",
            "module": "dist/types/src/input/validator.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/table/Table.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders a stylized `HTMLTableElement` that can display read-only or editable.\n`TableComponent` is a customized built-in element that renders columns and rows through events dispatched on `BroadcastChannel`.",
          "name": "TableComponent",
          "members": [
            {
              "kind": "field",
              "name": "channel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "columnData",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "savedState",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "editIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "blankRowData",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onMessage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onAdd",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onEdit",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onReadOnly",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSave",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onTableData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "next",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createDeleteButton",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tr",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCellListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "td",
                  "type": {
                    "text": "TdComponent"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onNext",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cols",
                  "type": {
                    "text": "ColumnData"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderRows",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "rows",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateRows",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "TrComponent[]"
              }
            },
            {
              "kind": "field",
              "name": "$head",
              "type": {
                "text": "HTMLTableSectionElement"
              }
            },
            {
              "kind": "field",
              "name": "$body",
              "type": {
                "text": "HTMLTableSectionElement"
              }
            },
            {
              "kind": "field",
              "name": "$cells",
              "type": {
                "text": "NodeListOf<HTMLTableCellElement>"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "the name of the channel used to communicate via `BroadcastChannel`, Required",
              "name": "channel"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "\"in-table\", Required",
              "name": "is"
            }
          ],
          "superclass": {
            "name": "HTMLTableElement",
            "module": "dist/types/src/table/Table.d.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "dist/types/src/table/Table.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/table/TableCard.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders a `TableComponent` in a stylized card\nthat displays buttons used for CRUD in the table.",
          "name": "TableCardComponent",
          "members": [
            {
              "kind": "field",
              "name": "channel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "readOnlyMode",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "editMode",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "save",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "$table",
              "type": {
                "text": "HTMLTableElement"
              }
            },
            {
              "kind": "field",
              "name": "$crudActions",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$addButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$editButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$saveButton",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "$cancelButton",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "the name of the channel used to communicate via `BroadcastChannel`, Required",
              "name": "channel"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "in-tablecard",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "dist/types/src/table/TableCard.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/table/Td.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TdComponent",
          "members": [
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setMode",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "readOnly",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "$readOnly",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "field",
              "name": "$input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "$inputContainer",
              "type": {
                "text": "HTMLSpanElement"
              }
            }
          ],
          "superclass": {
            "name": "HTMLTableCellElement",
            "module": "dist/types/src/table/Td.d.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "dist/types/src/table/Td.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/table/Tr.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TrComponent",
          "members": [
            {
              "kind": "field",
              "name": "$rowData",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "patchData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "HTMLTableRowElement",
            "module": "dist/types/src/table/Tr.d.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "dist/types/src/table/Tr.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types/src/table/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TableComponent",
          "declaration": {
            "name": "TableComponent",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "ColumnData",
          "declaration": {
            "name": "ColumnData",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "Column",
          "declaration": {
            "name": "Column",
            "module": "./Table"
          }
        },
        {
          "kind": "js",
          "name": "TableCardComponent",
          "declaration": {
            "name": "TableCardComponent",
            "module": "./TableCard"
          }
        },
        {
          "kind": "js",
          "name": "TdComponent",
          "declaration": {
            "name": "TdComponent",
            "module": "./Td"
          }
        },
        {
          "kind": "js",
          "name": "TrComponent",
          "declaration": {
            "name": "TrComponent",
            "module": "./Tr"
          }
        }
      ]
    }
  ]
}
